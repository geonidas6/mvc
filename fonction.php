<?php//-----------------------debut --------------------function getFileFromMultipleDir($base_dir , $dir_tab = [] ){    $files = [];    $files_tab = [];    foreach ($dir_tab as $dir){        if (is_dir($dir))            $files = array_diff(scandir($dir), array('.', '..'));        else            $files = [];        foreach ($files  as $value){            if (is_file($dir.'/'.$value))                array_push($files_tab, str_replace($base_dir,'',$dir).'/'.$value) ;        }    }    return $files_tab;}function autoload_all_class($extra_files = []){    foreach ($extra_files as $file){        if (file_exists($file))        require_once "$file";    }    $liste_file = getFileFromMultipleDir(__DIR__, ['Controlleur','Model']);    foreach ($liste_file as $key=>$value){        if (!in_array($value,$extra_files))            require_once "$value";    }}/** * Transforme en chaine de caracteres * les elements d'un taleau ; on peut utiliser un * separateurpour concatener les valeurs */ function _tableauToChaine($tableau_, $separateur = ' ', $encadreur = null){    $tailletab = sizeof($tableau_);    $tableau = array($tableau_);    $tableau = $tableau[0];    if ($tailletab > 0) {        $chaine = ($encadreur == null) ? $tableau[0] : "$encadreur" . $tableau[0] . "$encadreur";        for ($k = 1; $k < ($tailletab); $k++) {            if ($encadreur == null) {                $chaine .= $separateur . $tableau[$k];            } else {                $chaine .= $separateur . $encadreur . $tableau[$k] . $encadreur;            }        }        return $chaine;    } else {        return false;    }}/** * Met a jour le fichier log en parametre * @param $message * @param string $file */ function logFile($message, $file ='log.txt'){    $fp = fopen($file, "a+");    $message = date('m/d/Y H:i:s') . " : " . $message;    fwrite($fp, $message);    fwrite($fp, "\n");    fclose($fp);    //var_dump($fp);exit;}/** * Cette fonction transmet les valeurs nécessaire à l'affichage d'une vue * @param $templateFile * @param null $_params_ * @return string */ function render($templateFile, $_params_ = null){    if (!is_file($templateFile))        throw new \Exception("The template file '$templateFile' does not exist.");    if (is_array($_params_))        extract($_params_, EXTR_PREFIX_SAME, 'params');    else        $params = $_params_;    ob_start();    ob_implicit_flush(false);    require_once($templateFile);    //Helper::logFile("Render $templateFile-");    echo ob_get_clean();exit();}//*******************************************************//************ TEST DES CHAMPS DE FORMULAIRE ************//*******************************************************function valid_pass( $pass ){    //Si le champs est vide :    if( empty($pass) OR is_null($pass) OR !isset($pass) ){        return false;    } //Sinon si le champs a des caractères spéciaux, ou n'est pas compris entre 4 et 20 caractères    elseif(preg_match('#[\s]#',$pass)){//Si le pass contient un espace        return false;    }    elseif (preg_match('#[\<\>]#', $pass )){        return false;    }    else { //Sinon, le test est positif.        return true;    }}function valid_nom_pnom( $post ){    //Si le champs est vide :    if( empty($post) OR is_null($post) OR !isset($post) ){        return false;    } //Sinon si le champs a des caractères spéciaux, ou n'est pas compris entre 4 et 20 caractères    //elseif(!preg_match('#^([ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÒÓÔÕÖÙÚÛÜÝàáâãäåçèéêëìíîïðòóôõöùúûüýÿa-zA-Z]+|[ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÒÓÔÕÖÙÚÛÜÝàáâãäåçèéêëìíîïðòóôõöùúûüýÿa-zA-Z]+(\-|\s)?[ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÒÓÔÕÖÙÚÛÜÝàáâãäåçèéêëìíîïðòóôõöùúûüýÿa-zA-Z]+)$#' ,$post)){//lettres uniquement, soit espace soit tiret pour les noms composés.    elseif(!preg_match('#^([ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÒÓÔÕÖÙÚÛÜÝàáâãäåçèéêëìíîïðòóôõöùúûüýÿa-zA-Z-]{1,75})$#', $post)){ //^([a-zA-Z'àâéèêôùûçÀÂÉÈÔÙÛÇ[:blank:]-]{1,75})$        return false;    }    elseif (preg_match('#[\<\>]#', $post )){        return false;    }    else { //Sinon, le test est positif.        return true;    }}function valid_mail( $post ){    //Si le champs est vide :    if( empty($post) OR is_null($post) OR !isset($post) ){        return false;    } //Sinon si le champs a des caractères spéciaux, ou n'est pas compris entre 4 et 20 caractères    elseif( !preg_match("#^[a-z0-9._-]+@[a-z0-9._-]{2,}\.[a-z]{2,4}$#", $post) ){ //La fonction pregmatch vérifie que la chaine de caractère est formatée selon un certain format : au moins 1 caractère, un @, 2 caractères, 1 point, puis 4 caractères max.        return false;    }    elseif (preg_match('#[\<\>]#', $post )){        return false;    }    else { //Sinon, le test est positif.        return true;    }}function valid_bool( $post ){    //Si le champs est différent de 0 ou 1    if( $post == 0 OR $post == 1 ){        return true;    }    else { //Sinon, le test est positif.        return false;    }}function valid_input( $post ){    //Si le champs est vide :    if( empty($post) OR is_null($post) OR !isset($post) ){        return false;    }    elseif (preg_match('#[\<\>]#', $post )){ //Si le champs contient des chevrons (faille XSS)        return false;    }    else { //Sinon, le test est positif.        return true;    }}function valid_textarea( $post ){    //Si le champs est vide :    if( empty($post) OR is_null($post) OR !isset($post) OR $post == '' OR $post == ' ' ){        return false;    }    else { //Sinon, le test est positif.        return true;    }}function valid_phone( $post ){if (preg_match('/^((\\+216)|(00216))[0-9]{8}$/', $post )){    return true;}    return false;}function valid_url( $url ){    if (!filter_var($url, FILTER_VALIDATE_URL) === false) {        return true;    } else {        return false;    }}/* Remplace caractères accentués d'une chaine */function remove_accent($str){    $a = array(	'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ð',        'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'ß', 'à', 'á', 'â', 'ã',        'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ñ', 'ò', 'ó', 'ô', 'õ',        'ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ÿ', 'Ā', 'ā', 'Ă', 'ă', 'Ą', 'ą', 'Ć', 'ć', 'Ĉ',        'ĉ', 'Ċ', 'ċ', 'Č', 'č', 'Ď', 'ď', 'Đ', 'đ', 'Ē', 'ē', 'Ĕ', 'ĕ', 'Ė', 'ė', 'Ę', 'ę',        'Ě', 'ě', 'Ĝ', 'ĝ', 'Ğ', 'ğ', 'Ġ', 'ġ', 'Ģ', 'ģ', 'Ĥ', 'ĥ', 'Ħ', 'ħ', 'Ĩ', 'ĩ', 'Ī', 'ī',        'Ĭ', 'ĭ', 'Į', 'į', 'İ', 'ı', 'Ĳ', 'ĳ', 'Ĵ', 'ĵ', 'Ķ', 'ķ', 'Ĺ', 'ĺ', 'Ļ', 'ļ', 'Ľ', 'ľ',        'Ŀ', 'ŀ', 'Ł', 'ł', 'Ń', 'ń', 'Ņ', 'ņ', 'Ň', 'ň', 'ŉ', 'Ō', 'ō', 'Ŏ', 'ŏ', 'Ő', 'ő', 'Œ',        'œ', 'Ŕ', 'ŕ', 'Ŗ', 'ŗ', 'Ř', 'ř', 'Ś', 'ś', 'Ŝ', 'ŝ', 'Ş', 'ş', 'Š', 'š', 'Ţ', 'ţ', 'Ť',        'ť', 'Ŧ', 'ŧ', 'Ũ', 'ũ', 'Ū', 'ū', 'Ŭ', 'ŭ', 'Ů', 'ů', 'Ű', 'ű', 'Ų', 'ų', 'Ŵ', 'ŵ', 'Ŷ',        'ŷ', 'Ÿ', 'Ź', 'ź', 'Ż', 'ż', 'Ž', 'ž', 'ſ', 'ƒ', 'Ơ', 'ơ', 'Ư', 'ư', 'Ǎ', 'ǎ', 'Ǐ', 'ǐ',        'Ǒ', 'ǒ', 'Ǔ', 'ǔ', 'Ǖ', 'ǖ', 'Ǘ', 'ǘ', 'Ǚ', 'ǚ', 'Ǜ', 'ǜ', 'Ǻ', 'ǻ', 'Ǽ', 'ǽ', 'Ǿ', 'ǿ');    $b = array(	'A', 'A', 'A', 'A', 'A', 'A', 'AE', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I', 'D', 'N', 'O',        'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'U', 'Y', 's', 'a', 'a', 'a', 'a', 'a', 'a', 'ae', 'c',        'e', 'e', 'e', 'e', 'i', 'i', 'i', 'i', 'n', 'o', 'o', 'o', 'o', 'o', 'o', 'u', 'u', 'u', 'u',        'y', 'y', 'A', 'a', 'A', 'a', 'A', 'a', 'C', 'c', 'C', 'c', 'C', 'c', 'C', 'c', 'D', 'd', 'D',        'd', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'G', 'g', 'G', 'g', 'G', 'g', 'G', 'g',        'H', 'h', 'H', 'h', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'IJ', 'ij', 'J', 'j', 'K',        'k', 'L', 'l', 'L', 'l', 'L', 'l', 'L', 'l', 'L', 'l', 'N', 'n', 'N', 'n', 'N', 'n', 'n', 'O', 'o',        'O', 'o', 'O', 'o', 'OE', 'oe', 'R', 'r', 'R', 'r', 'R', 'r', 'S', 's', 'S', 's', 'S', 's', 'S',        's', 'T', 't', 'T', 't', 'T', 't', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'W',        'w', 'Y', 'y', 'Y', 'Z', 'z', 'Z', 'z', 'Z', 'z', 's', 'f', 'O', 'o', 'U', 'u', 'A', 'a', 'I', 'i',        'O', 'o', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'A', 'a', 'AE', 'ae', 'O', 'o');    return str_replace($a, $b, $str);}function sendSms($phone, $message , $key = 'textbelt'){    $ch = curl_init('https://textbelt.com/text');    $data = array(        'phone' => $phone,        'message' => $message,        'key' => $key,    );    curl_setopt($ch, CURLOPT_POST, 1);    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);       $response = curl_exec($ch);    curl_close($ch);    return $response ;}